
const serviceAccount = require("./config/firebase-adminsdk.json"); // ‚úÖ ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå config
const admin = require("./config/firebaseAdmin"); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Firebase Admin SDK
const { google } = require('googleapis');
const axios = require('axios');
const authenticateToken = require('./routes/authmiddleware'); // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ middleware

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const userRoutes = require('./routes/user');
const authRoutes = require('./routes/authRoutes');
const db = require('./config/dbConfig'); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö dbConfig
require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
const mqtt = require("mqtt"); // ‡πÉ‡∏ä‡πâ MQTT

const app = express();
const PORT = process.env.PORT || 8000;

// health check
app.get('/health', (req, res) => res.json({ ok: true }));

// üü¢ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MQTT Broker**
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á mqttBroker ‡πÄ‡∏õ‡πá‡∏ô HiveMQ Cloud
const mqttBroker = "mqtts://481acd0efb2b45088968087f799015b1.s1.eu.hivemq.cloud"; // ‡πÉ‡∏ä‡πâ mqtts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ TLS
const mqttClient = mqtt.connect(mqttBroker, {
  username: "iot_user",  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î username ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HiveMQ Cloud
  password: "Zathreeont123"  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î password ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HiveMQ Cloud
});


// üîπ **Topic ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ**
const gasTopic = "iot/gas";  // ‡∏Å‡πä‡∏≤‡∏ã
const waterLeakTopic = "iot/water_leak";  // ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡∏ã‡∏∂‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥
const bmeTopic = "bme680/data";  // BME680 (‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô, ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)
const doorSensorTopic = "home/door_sensor"; // üö™ ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
const HAFTopic = "iot/HAF";
const alertTopic = "iot/alert"


// üî¥ **‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå**
let gasData = { gas_ppm: 0 };
let waterLeakStatus = { value: 0, status: "Normal", color: "green" };
let bmeData = { temperature: 0, humidity: 0, air_quality: 0 };
let doorStatus = { status: "Closed", timestamp: new Date() }; // üö™ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π
let sensorData = {};
let heartrateData = { hr: 0, spo2: 0 };
let latestData = null;

const saveToDatabase = () => {
  if (latestData) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if (latestData.hr !== null && latestData.hr !== undefined && 
        latestData.spo2 !== null && latestData.spo2 !== undefined) {
      
      // Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Insert
      const query = `INSERT INTO health_data (hr, spo2) VALUES (?, ?)`;
      db.query(query, [latestData.hr, latestData.spo2], (err, result) => {
        if (err) {
          console.error("‚ùå Error saving data:", err.message);
        } else {
          console.log(`‚úÖ Data saved: HR=${latestData.hr}, SpO2=${latestData.spo2}`);
        }
      });

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      latestData = null;
    } else {
      console.log("‚ö†Ô∏è No valid data received, skipping database insert.");
    }
  } else {
    console.log("‚ö†Ô∏è No data available to save.");
  }
};
// ‡∏ï‡∏±‡πâ‡∏á Scheduler ‡∏ó‡∏∏‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (21600000 ms)
setInterval(saveToDatabase, 21600000);

// ‡∏ï‡∏±‡πâ‡∏á Scheduler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏±‡∏ô
setInterval(() => {
  const query = `DELETE FROM health_data WHERE timestamp < NOW() - INTERVAL 30 DAY`;
  db.query(query, (err, result) => {
    if (err) console.error("‚ùå Error deleting old data");
    else console.log(`üóëÔ∏è Deleted ${result.affectedRows} old records`);
  });
}, 86400000);

// ‚úÖ **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MQTT Broker**
mqttClient.on("connect", () => {
  console.log("‚úÖ Connected to MQTT Broker");

  mqttClient.subscribe([gasTopic, waterLeakTopic, bmeTopic, doorSensorTopic, HAFTopic, alertTopic], (err) => {
    if (!err) {
      console.log(`üì° Subscribed to topics: ${gasTopic}, ${waterLeakTopic}, ${bmeTopic}, ${doorSensorTopic}`);
    }
  });
});

//------------------------------------- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Water Sensor

let waterLeakCount = 0;
const leakThreshold = 2000; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Threshold  
const leakConfirmTime = 10; // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

const key = require('./config/firebase-adminsdk.json');

const SCOPES = ['https://www.googleapis.com/auth/firebase.messaging'];
const TOKEN_URI = 'https://oauth2.googleapis.com/token';

async function getAccessToken() {
  const jwtClient = new google.auth.JWT(
    key.client_email,
    null,
    key.private_key,
    SCOPES,
    null
  );
  const tokens = await jwtClient.authorize();
  return tokens.access_token;
}

async function notifyUsersInHost(host_id, payload) {
  try {
    // ‡∏î‡∏∂‡∏á fcm_token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô host
    const [users] = await db.query(`
        SELECT fcm_token FROM host_users
        JOIN users ON host_users.user_id = users.id
        WHERE host_id = ?
      `, [host_id]);

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ fcm_token
    for (const user of users) {
      if (user.fcm_token) {
        await sendPushNotification(user.fcm_token, payload);  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      }
    }
  } catch (err) {
    console.error('‚ùå Error sending notifications:', err);
  }
}

async function sendPushNotification(token, payload) {
  const accessToken = await getAccessToken();

  const messagePayload = {
    message: {
      token: token,
      notification: {
        title: payload.title || 'üì© ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
        body: payload.body || '',
      },
      android: {
        notification: {
          channelId: 'default',
          sound: 'default',
        },
      },
      apns: {
        payload: {
          aps: {
            sound: 'default',
          },
        },
      },
      data: {
        type: payload.type || 'general',
      },
    },
  };

  try {
    await axios.post(
      `https://fcm.googleapis.com/v1/projects/${key.project_id}/messages:send`,
      messagePayload,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );
    console.log('‚úÖ Notification sent');
  } catch (error) {
    console.error("‚ùå FCM Error Response:", error.response?.data || error.message);
    throw error;
  }
}
app.use(express.json());
app.post("/api/test-noti", async (req, res) => {
  const { fcmToken, title, body, type } = req.body;

  if (!fcmToken) return res.status(400).json({ error: "FCM token is required" });

  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
  const payload = {
    title: title || 'üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!',
    body: body || '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    type: type || 'test_alert',
  };

  try {
    await sendPushNotification(fcmToken, payload);
    res.json({ message: "‚úÖ Notification sent successfully" });
  } catch (err) {
    console.error("‚ùå Notification error:", err.message);
    res.status(500).json({ error: "‚ùå Failed to send notification" });
  }
});

// ‚úÖ **‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å MQTT**
mqttClient.on("message", async (topic, message) => {
  try {
    // const userId = req.userId;
    // const [user] = await db.query('SELECT fcm_token FROM users WHERE id = ?', [userId]);
    if (topic === gasTopic) {
      gasData = JSON.parse(message.toString());
      console.log("üì• Received Gas Data:", gasData);

      if (gasData.ppm > 70) {
        console.log("üî• Gas level is high! Sending alert...");

        // payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏Å‡πä‡∏™‡∏£‡∏±‡πà‡∏ß
        const gasPayload = {
          title: "üî• ‡πÅ‡∏Å‡πä‡∏™‡∏£‡∏±‡πà‡∏ß!",
          body: `‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏Å‡πä‡∏™ ${gasData.ppm} ppm ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢`,
          type: "gas_alert"
        };

        // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô host (‡πÉ‡∏™‡πà host_id ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        // await notifyUsersInHost(1, gasPayload); // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô `1` ‡πÄ‡∏õ‡πá‡∏ô host_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        await sendPushNotification("fTC1CJELT3C_Z5VIoDL3rC:APA91bE4cBC0C8tScOAL8cDmpDK7EIbjimpVQYE65dhqfGhid4B04GUrWhX5qlG8HuNY8UQ17mQKFS94VGHZosoD9Nk4v63pbkSvyvvmhi9yj64iHu8h_ro", gasPayload);
      }
    }

    if (topic === waterLeakTopic) {
      const sensorValue = parseInt(message.toString(), 10);
      console.log("üì• Received Water Sensor Value:", sensorValue);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (sensorValue < leakThreshold) {
        waterLeakCount++;
      } else {
        waterLeakCount = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏£‡∏±‡πà‡∏ß
      }

      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      if (waterLeakCount >= leakConfirmTime) {
        waterLeakStatus = {
          value: sensorValue,
          status: "üö® Leak Detected! üö®",
          color: "red"
        };
      } else {
        waterLeakStatus = {
          value: sensorValue,
          status: "‚úÖ No Leak",
          color: "green"
        };
      }

      console.log("üì° Debug: API sending data ->", waterLeakStatus);

    }


    if (topic === bmeTopic) {
      bmeData = JSON.parse(message.toString());
      console.log("üì• Received BME680 Data:", bmeData);
    }

    if (topic === doorSensorTopic) {
      doorStatus = { status: message.toString(), timestamp: new Date() };
      console.log("üì• Received Door Sensor Data:", doorStatus);
    }

    if (topic === alertTopic) {
      sensorData = message.toString();
      console.log(sensorData);
      console.log("üì° Received data:", sensorData);
    
      // üî¥ Fall Detected Condition
      if (sensorData === "User has fallen!") {
        const fallPayload = {
          title: "üö® ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°!",
          body: `‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`,
          type: "fall_alert"
        };
        await sendPushNotification(
          "fTC1CJELT3C_Z5VIoDL3rC:APA91bE4cBC0C8tScOAL8cDmpDK7EIbjimpVQYE65dhqfGhid4B04GUrWhX5qlG8HuNY8UQ17mQKFS94VGHZosoD9Nk4v63pbkSvyvvmhi9yj64iHu8h_ro",
          fallPayload
        );
      }
    
      // üî¥ Alert Triggered Condition (Button Press or Manual Alert)
      if (sensorData === "Alert Triggered!") {
        const alertPayload = {
          title: "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô!",
          body: `‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`,
          type: "emergency_alert"
        };
        await sendPushNotification(
          "fTC1CJELT3C_Z5VIoDL3rC:APA91bE4cBC0C8tScOAL8cDmpDK7EIbjimpVQYE65dhqfGhid4B04GUrWhX5qlG8HuNY8UQ17mQKFS94VGHZosoD9Nk4v63pbkSvyvvmhi9yj64iHu8h_ro",
          alertPayload
        );
      }
    }
    if (topic === HAFTopic) {
      heartrateData = JSON.parse(message.toString());
      console.log(heartrateData);
      const hr = heartrateData.hr;
      const spo2 = heartrateData.spo2;

      latestData = {
        hr: parseFloat(sensorData.hr),
        spo2: parseFloat(sensorData.spo2)
      };

      console.log(`‚ù§Ô∏è HR: ${hr} bpm`);
      console.log(`ü©∏ SpO2: ${spo2} %`);
  }

  } catch (error) {
    console.error("‚ùå Error parsing MQTT message:", error);
  }
});
app.get('/api/init-or-create-host/:user_id', async (req, res) => {
  const { user_id } = req.params;

  const [userRows] = await db.query(
    'SELECT full_name FROM users WHERE id = ?',
    [user_id]
  );

  const userName = userRows.length > 0 ? userRows[0].full_name : `User ${user_id}`;

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô owner ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [ownerHost] = await db.query(
      'SELECT * FROM hosts WHERE owner_id = ?',
      [user_id]
    );

    if (ownerHost.length > 0) {
      return res.status(200).json({
        role: 'owner',
        host_id: ownerHost[0].id,
        host_name: ownerHost[0].host_name,
        owner_id: ownerHost[0].owner_id
      });
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô member ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô host ‡πÑ‡∏´‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [memberHost] = await db.query(
      `SELECT h.id, h.host_name FROM hosts h
       JOIN host_members hm ON h.id = hm.host_id
       WHERE hm.user_id = ?`,
      [user_id]
    );

    if (memberHost.length > 0) {
      return res.status(200).json({
        role: 'member',
        host_id: memberHost[0].id,
        host_name: memberHost[0].host_name
      });
    }

    // 3. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠ member ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á host ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢
    const hostName = `Host ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (${userName})`;

    const [created] = await db.query(
      'INSERT INTO hosts (host_name, owner_id) VALUES (?, ?)',
      [hostName, user_id]
    );

    // const newHostId = created.insertId;

    // // ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ host_members ‡∏î‡πâ‡∏ß‡∏¢
    // await db.query(
    //   'INSERT INTO host_members (host_id, user_id) VALUES (?, ?)',
    //   [newHostId, user_id]
    // );

    return res.status(201).json({
      role: 'owner',
      host_id: newHostId,
      host_name: hostName,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á host ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß'
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err });
  }
});


app.post('/api/add-host-members', async (req, res) => {
  const { host_id, member_emails } = req.body;

  if (!host_id || !Array.isArray(member_emails)) {
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ host_id ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å' });
  }

  try {
    const [users] = await db.query(
      'SELECT id, email FROM users WHERE email IN (?)',
      [member_emails]
    );

    const foundEmails = users.map(u => u.email);
    const notFound = member_emails.filter(email => !foundEmails.includes(email));
    const userIds = users.map(u => u.id);
    const values = userIds.map(uid => [host_id, uid]);

    if (values.length > 0) {
      await db.query(
        'INSERT IGNORE INTO host_members (host_id, user_id) VALUES ?',
        [values]
      );
    }

    res.status(200).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', added: foundEmails, not_found: notFound });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err });
  }
});

app.get('/api/host-members/:host_id', async (req, res) => {
  const { host_id } = req.params;

  try {
    const [members] = await db.query(
      `SELECT u.id, u.full_name AS name, u.email, u.phone
        FROM host_members hm
        JOIN users u ON hm.user_id = u.id
        WHERE hm.host_id = ?`,
      [host_id]
    );

    res.status(200).json({ members });
  } catch (err) {
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: err });
  }
});

// ‚úÖ **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
const checkDatabaseConnection = async () => {
  try {
    await db.query('SELECT 1'); // Query ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    console.log('üì¶ Connected to MySQL database!');
  } catch (err) {
    console.error('‚ùå Unable to connect to the database:', err);
    process.exit(1); // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  }
};
checkDatabaseConnection();

// ‚úÖ **Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CORS ‡πÅ‡∏•‡∏∞ JSON**
app.use(cors());
app.use(bodyParser.json());

// ‚úÖ **Logging Middleware (‡πÅ‡∏™‡∏î‡∏á Log Request)**
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  next();
});


// ‚úÖ **Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Login/Register**
app.use('/api/auth', authRoutes);
app.use('/api/user', userRoutes);

// ‚úÖ **API ‡πÉ‡∏´‡πâ Mobile App ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå**
app.get("/api/gas", (req, res) => {
  res.json(gasData);
});

app.get("/api/heartrate", (req, res) => {
  res.json(heartrateData)
});

app.get("/api/water_leak", (req, res) => {
  res.json(waterLeakStatus);
});

app.get("/api/bme680", (req, res) => {
  res.json(bmeData);
});

app.get("/api/door_sensor", (req, res) => {
  res.json(doorStatus);
});

app.get('/api/history', async (req, res) => {
  const query = `
    SELECT hr, spo2, timestamp 
    FROM health_data 
    ORDER BY timestamp DESC 
    LIMIT 4
  `;

  try {
    // ‡πÉ‡∏ä‡πâ async/await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [results] = await db.query(query);
    if (results.length > 0) {
      res.status(200).json(results);
    } else {
      res.status(404).send("Data not found");
    }
  } catch (err) {
    console.error("‚ùå Error fetching data:", err.message);
    res.status(500).send("Server Error");
  }
});


// ‚úÖ **404 Handler**
app.use((req, res, next) => {
  res.status(404).json({ error: 'API endpoint not found' });
});

// ‚úÖ **Global Error Handler**
app.use((err, req, res, next) => {
  console.error('üî• Global Error:', err);
  res.status(500).json({ error: 'Internal Server Error' });
});

// ‚úÖ **Server Start**
app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});









