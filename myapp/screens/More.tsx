import React, { useState, useEffect } from 'react';
import {
    View,
    Text,
    Image,
    ScrollView,
    TouchableOpacity,
} from 'react-native';
import styles from '../styles/Morestyles';
import Icon from 'react-native-vector-icons/MaterialIcons';

const MoreScreen = ({ navigation }: { navigation: any }) => {
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const [gasValue, setGasValue] = useState<number | null>(null);
    const [waterLeak, setWaterLeak] = useState<{ value: number, status: string, color: string }>({
        value: 0,
        status: "Normal",
        color: "green"
    });

    const [bmeData, setBmeData] = useState<{ temperature: number, humidity: number, air_quality: number }>({
        temperature: 0,
        humidity: 0,
        air_quality: 0
    });
    const [doorStatus, setDoorStatus] = useState('‡∏õ‡∏¥‡∏î');


    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å API
    const fetchGasData = async () => {
        try {
            const response = await fetch("/api/gas");
            const data = await response.json();
    
            console.log("üì• Debug: Received Gas Data:", data); // ‡πÄ‡∏û‡∏¥‡πà‡∏° Debug Log
    
            // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å data.gas_ppm -> data.ppm
            setGasValue(data.ppm);
        } catch (error) {
            console.error("‚ùå Error fetching gas data:", error);
        }
    };

    const fetchWaterLeakData = async () => {
        try {
            const response = await fetch("/api/water_leak");
            const data = await response.json();

            console.log("üì• Debug: Received Water Leak Status:", data); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏°‡∏≤

            setWaterLeak(data);
        } catch (error) {
            console.error("‚ùå Error fetching water leak data:", error);
        }
    };
    

    const fetchBmeData = async () => {
        try {
            const response = await fetch("/api/bme680");
            const data = await response.json();
            setBmeData(data);
        } catch (error) {
            console.error("‚ùå Error fetching BME680 data:", error);
        }
    };

    const fetchDoorStatus = async () => {
        try {
            const response = await fetch('/api/door_sensor'); // Replace with your API URL
            const data = await response.json();
            setDoorStatus(data.status === 'Door Opened' ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'); // Map 'Open' -> '‡πÄ‡∏õ‡∏¥‡∏î', 'Closed' -> '‡∏õ‡∏¥‡∏î'
        } catch (error) {
            console.error('Error fetching door status:', error);
        }
    };

    // ‚úÖ ‡πÉ‡∏ä‡πâ useEffect ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    useEffect(() => {
        fetchGasData();
        fetchWaterLeakData();
        fetchBmeData();

        const interval = setInterval(() => {
            fetchGasData();
            fetchWaterLeakData();
            fetchBmeData();
        }, 2000);

        

        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        fetchDoorStatus();  
        const interval = setInterval(fetchDoorStatus, 2000); // Poll every 5 seconds
        return () => clearInterval(interval); // Cleanup interval on component unmount
    }, []);

    useEffect(() => {
        console.log("üî• Debug: waterLeak.status changed ->", waterLeak.status);
    }, [waterLeak]);
    
    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏µ
    const getAirQualityText = () => {
        if (bmeData.air_quality > 200) return { text: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏°‡∏≤‡∏Å", color: "green" };
        if (bmeData.air_quality > 100) return { text : "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ", color: "blue" };
        if (bmeData.air_quality > 50) return { text: "VOCs ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", color: "orange" };
        if (bmeData.air_quality > 10) return { text: "VOCs ‡∏™‡∏π‡∏á", color: "red" };
        return { text: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏î‡∏µ (VOCs ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)", color: "darkred" };
    };
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getAirQualityText ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ text ‡πÅ‡∏•‡∏∞ color
    const airQualityStatus = getAirQualityText();



    const doorTextColor = doorStatus === '‡πÄ‡∏õ‡∏¥‡∏î' ? '#FF0000' : '#00C341'; 


    const getGasLevelStyle = (ppm: number | null | undefined) => {
        if (ppm === null || ppm === undefined) {
            return { color: "gray", text: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå" }; 
        }
        if (ppm < 70) return { color: "#2ECC71", text: "‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ üòä" };  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        if (ppm < 300) return { color: "#3498DB", text: "‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á üîµ" };  // ‡∏ü‡πâ‡∏≤
        if (ppm < 800) return { color: "#F1C40F", text: "‡∏£‡∏∞‡∏ß‡∏±‡∏á ‚ö†Ô∏è" };  // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        if (ppm < 1500) return { color: "#E67E22", text: "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‚ùó" };  // ‡∏™‡πâ‡∏°
        return { color: "#E74C3C", text: "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏°‡∏≤‡∏Å üî•" };  // ‡πÅ‡∏î‡∏á
    };

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡πä‡∏≤‡∏ã
    const gasStatus = getGasLevelStyle(gasValue !== null ? gasValue : 0);


    return (
        <ScrollView
            contentContainerStyle={{
                ...styles.container,
                flexGrow: 1,
                paddingBottom: 100,
            }}
            showsVerticalScrollIndicator={false}
        >
            {/* Header */}
            <View style={styles.header}>
                <Image source={require('../assets/e.png')} style={styles.logo} />
                <TouchableOpacity onPress={() => navigation.navigate('UserProfile')}>
                    <View style={styles.iconCircle}>
                        <Icon name="account-circle" size={60} color="#2D5DEC" style={styles.profileIcon} />
                    </View>
                </TouchableOpacity>
            </View>

            <View style={styles.divider1} />

            {/* Content */}
            <View style={styles.grid}>

           {/* ‚úÖ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô */}
                <View style={styles.cardWrapper}>
                    <Text style={styles.cardTitle}>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô</Text>
                    <View style={styles.divider} />
                    <TouchableOpacity style={styles.card}>
                        <Image source={require('../assets/tem.png')} style={styles.iconTemp} />
                        <Text style={styles.cardContent}>
                            ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥:
                            <Text style={styles.valueText}>
                                {bmeData.temperature !== undefined && bmeData.temperature !== null
                                    ? bmeData.temperature.toFixed(2)
                                    : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"}¬∞C
                            </Text>
                        </Text>
                        <Image source={require('../assets/tem2.png')} style={styles.iconHumidity} />
                        <Text style={styles.cardContent}>
                            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô:
                            <Text style={styles.valueText}>
                                {bmeData.humidity !== undefined && bmeData.humidity !== null
                                    ? bmeData.humidity.toFixed(2)
                                    : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"}% RH
                            </Text>
                        </Text>
                    </TouchableOpacity>
                </View>


                {/* ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® */}
                <View style={styles.cardWrapper}>
                    <Text style={styles.cardTitle}>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®</Text>
                    <View style={styles.divider} />
                    <TouchableOpacity style={styles.card}>
                        <Image source={require('../assets/air.png')} style={styles.icon} />
                        <Text style={styles.cardContent}>
                            ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏£‡∏£‡∏∞‡πÄ‡∏´‡∏¢‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®:
                            {bmeData.air_quality !== undefined && bmeData.air_quality !== null
                                ? bmeData.air_quality.toFixed(2)
                                : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"} kŒ©
                        </Text>
                        <Text style={[styles.cardSubContent, { color: airQualityStatus.color }]}>
                            {airQualityStatus.text}
                        </Text>
                    </TouchableOpacity>
                </View>


                {/* ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡πä‡∏™‡∏´‡∏∏‡∏á‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô */}
                <View style={styles.cardWrapper}>
                    <Text style={styles.cardTitle}>‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡πä‡∏™‡∏´‡∏∏‡∏á‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô</Text>
                    <View style={styles.divider} />
                    <TouchableOpacity style={styles.card}>
                        <Image source={require('../assets/gas.png')} style={styles.icon} />
                        <Text style={styles.cardContent}>
                            Gas:
                            {/* ‡πÉ‡∏ä‡πâ Text ‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏™‡∏µ‡∏Ç‡∏≠‡∏á gasValue ‡πÅ‡∏•‡∏∞ ppm */}
                            <Text style={[styles.ppmText, { color: gasStatus.color }]}> {gasValue !== null ? gasValue : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î..."}</Text>
                            <Text style={styles.ppmText}> ppm</Text>
                        </Text>
                        <Text style={[styles.alertText, { color: gasStatus.color }]}>{gasStatus.text}</Text>
                    </TouchableOpacity>
                </View>



                {/* ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π */}
                <View style={styles.cardWrapper}>
                    <Text style={styles.cardTitle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π</Text>
                    <View style={styles.divider} />
                    <TouchableOpacity style={styles.card}>
                        <Image source={require('../assets/dor.png')} style={styles.icon} />
                        <Text style={[styles.doorcardContent, { color: doorTextColor }]}>
                            {doorStatus}
                        </Text>
                    </TouchableOpacity>
                </View>

    
                     {/* ‚úÖ ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡∏ã‡∏∂‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥ */}
                <View style={styles.cardWrapper}>
                    <Text style={styles.cardTitle}>‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡∏ã‡∏∂‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥</Text>
                    <View style={styles.divider} />
                    <TouchableOpacity style={styles.card}>
                        <Image source={require('../assets/water.png')} style={styles.icon} />
                        <Text style={[styles.cardContent, { color: waterLeak.color }]}>
                            {waterLeak.status?.toLowerCase().includes("leak detected")
                                ? "üö® ‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏£‡∏±‡πà‡∏ß : ‚óè"
                                : "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏£‡∏±‡πà‡∏ß : ‚óè"}
                        </Text>
                    </TouchableOpacity>
                </View>



            </View>
        </ScrollView>
    );
};

export default MoreScreen;
